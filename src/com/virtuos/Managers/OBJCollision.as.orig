package com.virtuos.Managers
{
	import MyDispatcher.DispatchMananger;
	
	import MyEvent.MyEvents;
	
	import com.virtuos.Characters.Farmer;
	import com.virtuos.Characters.Player;
	import com.virtuos.Characters.VampireHunter;
	
	import flash.geom.Point;
	import flash.utils.ByteArray;

	public class OBJCollision
	{
		public static var tempX:uint;
		public static var tempY:uint;
		public static var tempPoint:uint;
		private static var _passArray:Vector.<Number>=new Vector.<Number>;	
		public function OBJCollision()
		{
		}
		public static function enemyCollisions(_numX:Number,_numY:Number,_to:String='R',_farm:Farmer=null,_collisionDected:Boolean=false):Boolean{
			var i:uint=0;
			var _disX:Number;
			var _disY:Number;
			var _enLen:uint=DataManager._enemyArray.length;
			var _obsLen:uint=DataManager._obstacleArray.length;
			
			
			if(_to=='R'){				
				//和enemy碰撞
				for(i=0;i<_enLen;i++){
					_disX=DataManager._enemyArray[i].x-_numX;
					_disY=Math.abs(DataManager._enemyArray[i].y-_numY);
					if(_disX<=50&&_disX>0&&_disY<25&&i!=_farm._id){
						//trace(DataManager._enemyArray[i].x+25,DataManager._enemyArray[i].y+25)
						/*if((DataManager._enemyArray[i].x+25)/50-uint((DataManager._enemyArray[i].x+25)/50)<=.5){
							trace("x:",uint((DataManager._enemyArray[i].x+25)/50))
							tempX=uint((DataManager._enemyArray[i].x+25)/50)
						}else{
							trace("x:",Math.ceil((DataManager._enemyArray[i].x+25)/50))
							tempX=Math.ceil((DataManager._enemyArray[i].x+25)/50)
						}
						if((DataManager._enemyArray[i].y+25)/50-uint((DataManager._enemyArray[i].y+25)/50)<=.5){
							trace("y:",uint((DataManager._enemyArray[i].y+25)/50))
							tempY=uint((DataManager._enemyArray[i].y+25)/50)
						}else{
							trace("y:",Math.ceil((DataManager._enemyArray[i].y+25)/50))
							tempY=Math.ceil((DataManager._enemyArray[i].y+25)/50)
							
						}
						_farm._hitEnemyX=tempX;
						_farm._hitEnemyY=tempY;
						DataManager._mapArray[tempY][tempX]=1;*/
						//trace(_farm.myDistinationX,_farm.myDistinationY)
					//	printMap();
						//_farm._myMap=new ByteArray();
						//_farm._myMap.writeObject(DataManager._mapArray);
							
						//trace(DataManager._mapArray[tempY][tempX],_farm._myMap.length)
						//tempPoint
						//trace(uint((DataManager._enemyArray[i].x+25)/50),uint((DataManager._enemyArray[i].y+25)/50),DataManager._enemyArray[i].x+25,Math.ceil((DataManager._enemyArray[i].x+25)/50));
						//trace(i,DataMananger._obstacleArray[i].x,DataMananger._obstacleArray[i].y)
						return true;
					}
				}
				//判断碰撞障碍物，斜着走的时候才管用
				if(_collisionDected){
					for(i=0;i<_obsLen;i++){
						_disX=DataManager._obstacleArray[i].x-_numX;
						_disY=Math.abs(DataManager._obstacleArray[i].y-_numY);
						if(_disX<75&&_disX>0&&_disY<25){
							//trace(i,DataMananger._obstacleArray[i].x,DataMananger._obstacleArray[i].y)
							return true;
						}
					}
				}
			}else if(_to=='L'){				
				//和enemy碰撞
				for(i=0;i<_enLen;i++){
					_disX=DataManager._enemyArray[i].x-_numX;
					_disY=Math.abs(DataManager._enemyArray[i].y-_numY);
					if(_disX>=-50&&_disX<0&&_disY<25&&i!=_farm._id){
						//trace(i,DataMananger._obstacleArray[i].x,DataMananger._obstacleArray[i].y)
						return true;
					}
				}
				//判断碰撞障碍物
				if(_collisionDected){
					for(i=0;i<_obsLen;i++){
						_disX=DataManager._obstacleArray[i].x-_numX;
						_disY=Math.abs(DataManager._obstacleArray[i].y-_numY);
						if(_disX>-75&&_disX<0&&_disY<25){
							//trace(i,DataMananger._obstacleArray[i].x,DataMananger._obstacleArray[i].y)
							return true;
						}
					}
				}
			}else if(_to=='U'){				
				//和enemy碰撞
				for(i=0;i<_enLen;i++){
					_disX=Math.abs(DataManager._enemyArray[i].x-_numX);
					_disY=DataManager._enemyArray[i].y-_numY;
					if(_disY>=-50&&_disY<0&&_disX<25&&i!=_farm._id){
						//trace(i,DataMananger._obstacleArray[i].x,DataMananger._obstacleArray[i].y)
						return true;
					}
				}
				//判断碰撞障碍物
				if(_collisionDected){
					for(i=0;i<_obsLen;i++){
						_disX=Math.abs(DataManager._obstacleArray[i].x-_numX);
						_disY=DataManager._obstacleArray[i].y-_numY;
						if(_disY>-75&&_disY<0&&_disX<25){
							//trace(i,DataMananger._obstacleArray[i].x,DataMananger._obstacleArray[i].y)
							return true;
						}
					}
				}
			}else if(_to=='D'){				
				//和enemy碰撞
				for(i=0;i<_enLen;i++){
					_disX=Math.abs(DataManager._enemyArray[i].x-_numX);
					_disY=DataManager._enemyArray[i].y-_numY;
					if(_disY<=50&&_disY>0&&_disX<25&&i!=_farm._id){
						//trace(i,DataMananger._enemyArray[i].x,DataMananger._enemyArray[i].y)
						return true;
					}
				}
				//判断碰撞障碍物
				if(_collisionDected){
					for(i=0;i<_obsLen;i++){
						_disX=Math.abs(DataManager._obstacleArray[i].x-_numX);
						_disY=DataManager._obstacleArray[i].y-_numY;
						if(_disY<50&&_disY>0&&_disX<25){
							//trace(i,DataMananger._obstacleArray[i].x,DataMananger._obstacleArray[i].y)
							return true;
						}
					}
				}
			}
			return false;
		}
		//enemy和player 碰撞
		public static function hitPlayer(_farm:Farmer):String
		{
			var _numX:Number = _farm.x;
			var _numY:Number = _farm.y;				
			/** 
			 * _numX,enemyX;_numY
			 * */			
			if(DataManager._playerPoint.x>0){
				//trace(DataMananger._playerPoint);
				var _disX:Number=DataManager._playerPoint.x-_numX;
				var _disY:Number=DataManager._playerPoint.y-_numY;
				var _dis:Number=Math.sqrt(_disX*_disX+_disY*_disY);
			}
			if(!DataManager._playerMoving){
				
				if(_dis<DataManager._enemyCollision-DataManager._enemyCollision/4){
					_farm._through=0;
					main3D._player.changePoint("+50");
					DispatchMananger._em3D.dispatchEvent(new MyEvents('feed',_farm))
					return 'feed'
				}else if(_dis>=DataManager._enemyCollision&&_dis<DataManager._torchCollision/2){
					DataManager._playerDeath = true;
					return 'die';
				}/*else if(_through==1&&_dis>=DataMananger._enemyCollision){
					_through=0;
					trace("stopkill",_dis)
					main3D._player.changePoint("+10");
					//DispatchMananger._em3D.dispatchEvent(new MyEvents(MyEvents.CHANGE_POINT,"+10"));
					return 'kill';
				}*/
				_farm._through=0;
			}else{
				var _extend:uint=0;
				if(DataManager._dashSpeed<=50){
					_extend=DataManager._dashSpeed/4
				}else{
					_extend=10
				}
				if(_dis<DataManager._enemyCollision){
					_farm._through=1
					//trace("1:",_dis,_farm._id)
				}else if(_dis>DataManager._enemyCollision+_extend/2&&_farm._through==1&&_dis<=DataManager._torchCollision){
					_farm._through=2;
					//trace("2:",_dis,DataMananger._enemyCollision,DataMananger._dashSpeed)
					
				}else{
					//trace("3:",_dis,DataMananger._enemyCollision)
				}
				if(_farm._through==2){
					_farm._through=0;
					//trace("kill:",_dis,DataMananger._dashSpeed,_farm._id)
					main3D._player.changePoint("+10");
					return 'kill';
				}
			}			
			return '';
		}
		private static function printMap():void{
			var tempStr:String="";
			for(var i:uint=0;i<32;i++){
				trace(DataManager._mapArray[i]);				
			}		
		}
		public static function killPlay(_hunter:VampireHunter):String
		{
			var _numX:Number = _hunter.x;
			var _numY:Number = _hunter.y;
			if(DataManager._playerPoint.x>0)
			{	//trace(DataManager._playerPoint.x)
				var _disX:Number=DataManager._playerPoint.x-_numX;
				var _disY:Number=DataManager._playerPoint.y-_numY;
				var _dis:Number=Math.sqrt(_disX*_disX+_disY*_disY);
			}		
			if(_dis>=DataManager._enemyCollision&&_dis<DataManager._hunterTorchCollision/2)
			{				
				DataManager._playerDeath = true;
				return 'die';
			}
			return '';
		}	
		public static function playerCollisions(_ratioX:Number,_ratioY:Number,_speed:Number):Boolean{
			//trace("ss:",_ratioX,_ratioY)//比sin（10）
			var _tempSpeed:Number=_speed;			
			var i:uint=0;
			var _disX:Number;
			var _disY:Number;
				
			var _enLen:uint=DataManager._enemyArray.length;
			var _obsLen:uint=DataManager._obstacleArray.length;
			//trace(Math.abs(_tempSpeed*_ratioX))
			if(_ratioX<0){				
				for(i=0;i<_obsLen;i++){
					_disX=DataManager._obstacleArray[i].x-(DataManager._playerPoint.x);	
					_disY=Math.abs(DataManager._playerPoint.y-_tempSpeed*_ratioY-DataManager._obstacleArray[i].y);
						if(_disY<30&&_disX<50&&_disX>0){						
							_passArray[0]=497-DataManager._obstacleArray[i].x+40
							_passArray[1]=359-DataManager._playerPoint.y;
//							trace(i,497-DataMananger._obstacleArray[i].x)
							if(DataManager._obstacleArray[i].x-DataManager._obstacleArray[i-1].x==50&&i>0&&Math.abs(_ratioX)>0.45){
//								_passArray[0]=497-DataMananger._obstacleArray[i-1].x+40
							}
							DispatchMananger._em3D.dispatchEvent(new MyEvents('setpostion',_passArray))
							return true;
						}else if(_disY<30&&_disX<Math.abs(_tempSpeed*_ratioX*2)&&_disX>0){
							trace("get");
							DataManager._brake=true;
						}
					
				}
			}else if(_ratioX>=0){
				for(i=0;i<_obsLen;i++){
					_disX=DataManager._obstacleArray[i].x-(DataManager._playerPoint.x);
					_disY=Math.abs(DataManager._playerPoint.y-_tempSpeed*_ratioY-DataManager._obstacleArray[i].y);					
						if(_disY<30&&_disX>-50&&_disX<0){						
							_passArray[0]=497-DataManager._obstacleArray[i].x-50
							_passArray[1]=359-DataManager._playerPoint.y
							if(DataManager._obstacleArray[i+1].x-DataManager._obstacleArray[i].x==50&&i<_obsLen&&Math.abs(_ratioX)>0.45){
//								_passArray[0]=497-DataMananger._obstacleArray[i+1].x-50
							}
							DispatchMananger._em3D.dispatchEvent(new MyEvents('setpostion',_passArray))							
							return true;
						}					
				}
			}
			//
			if(_ratioY<0){
				for(i=0;i<_obsLen;i++){
					_disX=Math.abs(DataManager._obstacleArray[i].x-(DataManager._playerPoint.x-_tempSpeed*_ratioX));					
					_disY=DataManager._obstacleArray[i].y-(DataManager._playerPoint.y-_tempSpeed*_ratioY);
					if(_disX<30&&_disY<50&&_disY>0){						
						_passArray[0]=497-DataManager._playerPoint.x
						_passArray[1]=359-DataManager._obstacleArray[i].y+40
						//_passArray[2]=_ratioX;
						//_passArray[3]=_ratioY;
						DispatchMananger._em3D.dispatchEvent(new MyEvents('setpostion',_passArray))
						
						return true;
					}
				}
			}else if(_ratioY>=0){
				for(i=0;i<_obsLen;i++){
					_disX=Math.abs(DataManager._obstacleArray[i].x-(DataManager._playerPoint.x-_tempSpeed*_ratioX));					
					_disY=DataManager._obstacleArray[i].y-(DataManager._playerPoint.y-_tempSpeed*_ratioY);
					if(_disX<30&&_disY>-50&&_disY<0){
						_passArray[0]=497-DataManager._playerPoint.x//-_tempSpeed*_ratioX;
						_passArray[1]=359-DataManager._obstacleArray[i].y-50;
						//_passArray[2]=_ratioX;
						//_passArray[3]=_ratioY;
						DispatchMananger._em3D.dispatchEvent(new MyEvents('setpostion',_passArray))
						return true;
					}
				}
			}
			//if(_ratioX<0){
				/*for(i=0;i<DataMananger._obstacleArray.length;i++){
					//trace(DataMananger._playerPoint.x,"::",_ratioX*_tempSpeed,"::",DataMananger._obstacleArray[i].x)
					_disX=Math.abs(DataMananger._playerPoint.x+_ratioX*_tempSpeed-DataMananger._obstacleArray[i].x);
					_disY=Math.abs(DataMananger._playerPoint.y+_ratioY*_tempSpeed-DataMananger._obstacleArray[i].y);
					if(Math.sqrt(_disX*_disX+_disY*_disY)<50*Math.sqrt(2)){
						//trace(DataMananger._playerPoint.x,"::",_ratioX*_tempSpeed,"::",DataMananger._obstacleArray[i].x)
						return true;
					}
				}*/
//			}else if(_ratioX>=0){
//				for(i=0;i<DataMananger._obstacleArray.length;i++){
//					if(Math.abs(DataMananger._playerPoint.x+_ratioX*_tempSpeed-DataMananger._obstacleArray[i].x)<=50){
//						//return true;
//					}
//				}
//			}
			/*if(Math.abs(_x)<.17||Math.abs(_y)<.17){
				
				for(i=0;i<DataMananger._obstacleArray.length;i++){
					_disX=DataMananger._playerPoint.x-DataMananger._obstacleArray[i].x;
					_disY=DataMananger._playerPoint.y-DataMananger._obstacleArray[i].y;
					if(Math.sqrt(_disX*_disX+_disY*_disY)<50){
						return true;
					}
				}
			}else{
				for(i=0;i<DataMananger._obstacleArray.length;i++){
					_disX=DataMananger._playerPoint.x-DataMananger._obstacleArray[i].x;
					_disY=DataMananger._playerPoint.y-DataMananger._obstacleArray[i].y;
					if(Math.sqrt(_disX*_disX+_disY*_disY)<50*Math.sqrt(2)){
						return true;
					}
				}
			}*/
			//trace(DataMananger._obstacleArray);
			return false;
		}
	}
}