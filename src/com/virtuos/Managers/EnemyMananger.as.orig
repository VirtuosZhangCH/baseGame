package com.virtuos.Manangers
{
	import MyDispatcher.DispatchMananger;
	
	import MyEvent.EnemyEvents;
	import MyEvent.MyEvents;
	
	import com.virtuos.Characters.Farmer;
	import com.virtuos.animation.AutoMovieClip3D;
	import com.virtuos.display.MovieClip;
	
	import flash.events.TimerEvent;
	import flash.geom.Point;
	import flash.utils.Timer;
	
	import starling.events.Event;
	
	/****
	 * 
	 * Enemy Ai
	 * 
	 * */
	public class EnemyMananger
	{		
		/*public static const startPoint1:Vector.<uint>=new <uint>[50,350];
		public static const startPoint2:Vector.<uint>=new <uint>[2048-100,1024];
		public static const startPoint3:Vector.<uint>=new <uint>[1024,1000];*/
		//feed time
		private static var _myTimer:Timer=new Timer(1000);
		private static var _time:uint=0;	
		//被feed发出警告的x,y
		public static var _alertX:int=-15;
		public static var _alertY:int=-15;
		
		public function EnemyMananger()
		{			
		}		
		public static function enemyAI(_farm:Farmer,_remove:Boolean=false):void{
			if(_remove){
				_farm.removeEventListener(Event.ENTER_FRAME,_onMove);
			
			
				_farm.removeEventListener("refind",_onRefind);
			
				_farm.removeEventListener("wait",_onWait);
				return
			}
			
			var _to:String='R';	
			var _myX:uint=(_farm.y+25)/50;
			var _myY:uint=(_farm.x+25)/50;
			//alert ratio;
			var _alert_Distance:Number;
			var _alert_DistanceX:Number;
			var _alert_DistanceY:Number;
			var _alert_RatioX:Number;
			var _alert_RatioY:Number;
			//var _to_H:String="R";
			//var _to_V:String="U"
			_farm.visible=true;
			if(_farm._altered){
				//直接走向玩家
				_alert_DistanceX=_myY-_farm.myDistinationY;
				_alert_DistanceY=_myX-_farm.myDistinationX;
				_alert_Distance=Math.sqrt(_alert_DistanceX*_alert_DistanceX+_alert_DistanceY*_alert_DistanceY);				
				_alert_RatioX=_alert_DistanceX/_alert_Distance;
				_alert_RatioY=_alert_DistanceY/_alert_Distance;	
				if(_alert_RatioY>0){
					_farm._to_V="U";
				}else{
					_farm._to_V="D";
				}
				if(_alert_RatioX>0){
					_farm._to_H="L";
					_farm._farmerStatus.scaleX=1;
				}else{
					_farm._to_H="R";
					_farm._farmerStatus.scaleX=-1;
				}
			}else{			
			//trace(_farm.myStartX,_farm.myStartY,(_farm.x+25)/50,(_farm.y+25)/50)
				_farm.myPath=PathFinder.findPath(DataMananger._mapArray,_myX,_myY,_farm.myDistinationX,_farm.myDistinationY,_farm)
			}	
			//if(!_farm.hasEventListener(Event.ENTER_FRAME)){
				_farm.addEventListener(Event.ENTER_FRAME,_onMove);
			//}
			if(!_farm.hasEventListener("refind")){
				_farm.addEventListener("refind",_onRefind);
			}
			if(!_farm.hasEventListener("wait")){
				_farm.addEventListener("wait",_onWait);
			}
		//	_farm.addEventListener(Event.ENTER_FRAME,_ontest)
				function _ontest(e:Event):void{
				if(_farm._id==0)
					trace("ssd:",MovieClip(_farm._farmerStatus.children[0]).currentFrame)
				}
			/***
			 * AI
			 * */
				function _onMove(e:Event):void
				{	
				
					if(_farm._altered){
						//如果敌人被警报了						
						if(OBJCollision.enemyCollisions(_farm.x,_farm.y,_farm._to_V,_farm._id,true))
						{
							/***					  
							 * 如果碰撞，则重新选择方向					 
							 * */
							_farm.removeEventListener(Event.ENTER_FRAME,_onMove);
							_farm._altered=false;
							_farm.dispatchEvent(new Event('wait'));
							return;
						}
						if(OBJCollision.enemyCollisions(_farm.x,_farm.y,_farm._to_H,_farm._id,true)){
							/***					  
							 * 如果碰撞，则重新选择方向					 
							 * */
							_farm.removeEventListener(Event.ENTER_FRAME,_onMove);
							_farm._altered=false;
							_farm.dispatchEvent(new Event('wait'));
							return;
						}						
					}else{
						//如果敌人没有被警报
						/*if(_farm._to_V==""){
							_to=_farm._to_H
						}else{
							_to=_farm._to_V
						}*/
						if(OBJCollision.enemyCollisions(_farm.x,_farm.y,_to,_farm._id))
						{
							/***
							 * 如果碰撞，则重新选择方向
							 * */
							_farm.removeEventListener(Event.ENTER_FRAME,_onMove);
							_farm._altered=false;
							_farm.touchAI=true;
							_farm.dispatchEvent(new Event('wait'));
							return;
						}
						
						//判断是否为被alert的enemy；
	//					trace(_farm._id,_alertX,(_alertX-(_farm.x+25)/50)*(_alertX-(_farm.x+25)/50)+(_alertY-(_farm.y+25)/50)*(_alertY-(_farm.y+25)/50))
						if(Math.sqrt((_alertX-(_farm.x+25)/50)*(_alertX-(_farm.x+25)/50)+(_alertY-(_farm.y+25)/50)*(_alertY-(_farm.y+25)/50))<DataMananger._alertRadius&&!_farm._altered){
							//trace("Alert!!!!!",_farm._id,Math.sqrt((_alertX-(_farm.y+25)/50)*(_alertX-(_farm.y+25)/50)+(_alertY-(_farm.x+25)/50)*(_alertY-(_farm.x+25)/50)))
							//重置enemy的位置到整数位
	//						_farm.x=_farm.myPath[0].j*50-25;
	//						_farm.y=_farm.myPath[0].i*50-25;
							//trace("farmer 被alert了：",_alertX,_alertY,_farm.myPath[0].j,_farm.myPath[0].i)
							if(!_farm._isFeed)
							{
								_farm._altered=true;
							//播放感叹号动画
								_farm._farmerStatus.gotoAndStop(4);
								_farm.removeEventListener(Event.ENTER_FRAME,_onMove);
								_farm.myDistinationX=_alertY;
								_farm.myDistinationY=_alertX;
								
								var _countTimer1:int = GlobalValue.timer.addCallBack(
									function():void
									{
										GlobalValue.timer.removeCallBack(_countTimer1);
										_farm._farmerStatus.gotoAndStop(1);
										enemyAI(_farm);
									}, 800, true, false);
							}
							return;
						}
					}
					if(OBJCollision.hitPlayer(_farm)=='kill'){
						//_enemyReaction("kill",_farm);
						_farm.removeEventListener(Event.ENTER_FRAME,_onMove);
						_farm.removeEventListener("refind",_onRefind);
						_farm.removeEventListener("wait",_onWait);
						farmerDeathAnimation();
//						_amc.addEventListener(Event.ENTER_FRAME, onEnterFarme)
						_farm.tempTorch.visible = false;
						
						 
//						trace(main3D.test);
						//_farm.removeEventListener(Event.ENTER_FRAME,_onMove);
						//_farm.dispatchEvent(new EnemyEvents(EnemyEvents.ENEMY_DIE,'kill'));
					}else if(OBJCollision.hitPlayer(_farm)=='die'){
						//_enemyReaction("die",_farm);
						
						DispatchMananger._em3D.dispatchEvent(new MyEvents('die',_farm))
						
						//_farm.dispatchEvent(new EnemyEvents(EnemyEvents.ENEMY_DIE,'die'));
					}else if(OBJCollision.hitPlayer(_farm)=='feed'){
						//trace(_farm.myPath[0].j,_farm.myPath[0].i);
						_alertX=_farm.myPath[0].j;
						_alertY=_farm.myPath[0].i;
//						_farm._farmerStatus.addEventListener(Event.ENTER_FRAME, onEnterFarme)
						trace("事发地点为:",_alertX,_alertY);
						DataMananger._playerFeeding=true;
						_farm._removeTorch();
						_farm._isFeed=true;
						_myTimer.addEventListener("timer",_timerHandler);
						_myTimer.start();
						_farm.removeEventListener(Event.ENTER_FRAME,_onMove);
						_farm.removeEventListener("refind",_onRefind);
						_farm.removeEventListener("wait",_onWait);
						
					}
					if(!_farm._altered){
						//非alert状态下的行走方式
						_farm._to_H=_farm._to_V=""
						if(_farm.myPath.length>0){
							if(_farm.myPath[0].j*50-25>_farm.x){
		//						trace(_farm.myPath[0].j*50-25,_farm.x)
								_farm._to_H=_to="R";
							}else if(_farm.myPath[0].j*50-25<_farm.x){
								
								_farm._to_H=_to="L"
							}else  if(_farm.myPath[0].i*50-25>_farm.y){
								
								_farm._to_V=_to="D"
							}else  if(_farm.myPath[0].i*50-25<_farm.y){
								
								_farm._to_V=_to="U"
							}
							if(_to=='R'){
								_farm._farmerStatus.scaleX=-1;
								if(_farm.x+DataMananger._enemySpeed>_farm.myPath[0].j*50-25){
									_farm.x=_farm.myPath[0].j*50-25;
									if(_farm.myPath.length>1){
										_farm.myPath.shift();
									}
								}else{
									_farm.x+=DataMananger._enemySpeed;
								}
							}else if(_to=='L'){
								_farm._farmerStatus.scaleX=1;
								if(_farm.x-DataMananger._enemySpeed<_farm.myPath[0].j*50-25){
									_farm.x=_farm.myPath[0].j*50-25;
									if(_farm.myPath.length>1){
										_farm.myPath.shift();
									}
								}else{
									_farm.x-=DataMananger._enemySpeed;
								}
							}else if(_to=='U'){
								if(_farm.y-DataMananger._enemySpeed<_farm.myPath[0].i*50-25){
									_farm.y=_farm.myPath[0].i*50-25;
									if(_farm.myPath.length>1){
										_farm.myPath.shift();
									}
								}else{
									_farm.y-=DataMananger._enemySpeed;
								}
							}else if(_to=='D'){
								if(_farm.y+DataMananger._enemySpeed>_farm.myPath[0].i*50-25){
									_farm.y=_farm.myPath[0].i*50-25;
									if(_farm.myPath.length>1){
										_farm.myPath.shift();
									}
								}else{
									_farm.y+=DataMananger._enemySpeed;
								}
							}
						}
						if(_farm.myPath.length==1){
							_farm._altered=false;
							_farm.dispatchEvent(new Event('refind'));						
						}
					}else{
						//alert状态下的行走方式
						_farm.x-=DataMananger._enemySpeed*_alert_RatioX;
						_farm.y-=DataMananger._enemySpeed*_alert_RatioY;
					}
					//trace(_farm._id,_farm.myPath.length)					
					DataMananger._enemyArray[_farm._id]=new Point(_farm.x,_farm.y);	
					//trace(DataMananger._enemyArray[0])
				}
				
				//敌人碰敌人后谦让的
				function _onWait(e:Event):void{
					_farm.removeEventListener('wair',_onWait);						
					_farm._farmerStatus.gotoAndStop(2);
					var _countTimer:int = GlobalValue.timer.addCallBack(
						function():void
						{
							//trace(_to)
							GlobalValue.timer.removeCallBack(_countTimer);
							_farm._farmerStatus.gotoAndStop(1);
							if(_farm.touchAI){
								_GetNewWayPoint();
								_farm.touchAI=false;
							}else{
								if(_farm._waypointI==DataMananger._wayPointArray.length-1){
									_farm._waypointI=0;
								}else{
									_farm._waypointI++
								}
								_farm.myDistinationX=DataMananger._wayPointArray[_farm._waypointI].j;
								_farm.myDistinationY=DataMananger._wayPointArray[_farm._waypointI].i;
							}
							EnemyMananger.enemyAI(_farm)
						}, 1000, true, false);
				}
				function _GetNewWayPoint():void{
					var i:uint=0;
					if(_farm._to_H=="R"){
						/*for(i=0;i<DataMananger._wayPointArray.length;i++){
							if(DataMananger._wayPointArray[i].j*50-25<_farm.x){
								_farm._waypointI=i
								_farm.myDistinationX=DataMananger._wayPointArray[_farm._waypointI].j;
								_farm.myDistinationY=DataMananger._wayPointArray[_farm._waypointI].i;
								
								return
							}
						}*/
//						_farm._waypointI=0
//						_farm.myDistinationX=DataMananger._wayPointArray[0].j;
//						_farm.myDistinationY=DataMananger._wayPointArray[0].i;
						if(_farm._waypointI==0){
							_farm._waypointI=DataMananger._wayPointArray.length-1;
						}else{
							_farm._waypointI--
						}				
					}
					if(_farm._to_H=="L"){
					/*	for(i=0;i<DataMananger._wayPointArray.length;i++){
							if(DataMananger._wayPointArray[i].j*50-25>_farm.x){
								_farm._waypointI=i
								_farm.myDistinationX=DataMananger._wayPointArray[_farm._waypointI].j;
								_farm.myDistinationY=DataMananger._wayPointArray[_farm._waypointI].i;
								return
							}
						}*/
						if(_farm._waypointI==DataMananger._wayPointArray.length-1){
							_farm._waypointI=0;
						}else{
							_farm._waypointI++
						}
						
					}
					if(_farm._to_V=="U"){
						/*for(i=0;i<DataMananger._wayPointArray.length;i++){
							if(DataMananger._wayPointArray[i].i*50-25>_farm.y){
								_farm._waypointI=i
								_farm.myDistinationX=DataMananger._wayPointArray[_farm._waypointI].j;
								_farm.myDistinationY=DataMananger._wayPointArray[_farm._waypointI].i;
								return
							}
						}*/
					//	_farm.alpha=.5
						if(_farm._waypointI==DataMananger._wayPointArray.length-1){
							_farm._waypointI=0;
						}else{
							_farm._waypointI++
						}				
					}
					if(_farm._to_V=="D"){
						/*for(i=0;i<DataMananger._wayPointArray.length;i++){
							if(DataMananger._wayPointArray[i].i*50-25<_farm.y){
								_farm._waypointI=i
								_farm.myDistinationX=DataMananger._wayPointArray[_farm._waypointI].j;
								_farm.myDistinationY=DataMananger._wayPointArray[_farm._waypointI].i;
								return
							}
						}*/
						if(_farm._waypointI==0){
							_farm._waypointI=DataMananger._wayPointArray.length-1;
						}else{
							_farm._waypointI--
						}
						
					}
					_farm.myDistinationX=DataMananger._wayPointArray[_farm._waypointI].j;
					_farm.myDistinationY=DataMananger._wayPointArray[_farm._waypointI].i;
					
					/*if(_farm._waypointI==DataMananger._wayPointArray.length-1){
							_farm._waypointI=0;
					}else{
							_farm._waypointI++
					}
					_farm.myDistinationX=DataMananger._wayPointArray[_farm._waypointI].j;
					_farm.myDistinationY=DataMananger._wayPointArray[_farm._waypointI].i;*/
					
				}
				function _onRefind(e:Event):void{
					_farm.removeEventListener('refind',_onRefind)
					var _countTimer1:int = GlobalValue.timer.addCallBack(
						function():void
						{
							GlobalValue.timer.removeCallBack(_countTimer1);
							_farm._farmerStatus.gotoAndStop(2);
							
						}, 800, true, false);
					
					var _countTimer:int = GlobalValue.timer.addCallBack(
						function():void
						{
							GlobalValue.timer.removeCallBack(_countTimer);
							_farm._farmerStatus.gotoAndStop(1);
							if(_farm._waypointI==DataMananger._wayPointArray.length-1){
								_farm._waypointI=0;
							}else{
								_farm._waypointI++
							}
							_farm.myDistinationX=DataMananger._wayPointArray[_farm._waypointI].j;
							_farm.myDistinationY=DataMananger._wayPointArray[_farm._waypointI].i;
							EnemyMananger.enemyAI(_farm)
						}, 3300, true, false);
				}
				function _timerHandler(e:TimerEvent):void{
					_time++;
					if(_time==2){
						DataMananger._playerFeeding=false;
						if(!DataMananger._playerDeath)
						{
							farmerDeathAnimation();
							//将警告点移除
							_alertX=-15
							_alertY=-15
						}
						
						_time=0;
						_myTimer.removeEventListener("timer",_timerHandler);
						_myTimer.stop();
					}
				}
				function farmerDeathAnimation():void
				{
					var _amc:AutoMovieClip3D = new AutoMovieClip3D("ui.farmer.animation.FarmerDie", animationComplete);
					_farm.addChild(_amc)
					_farm._farmerStatus.visible = false;
				}
				function animationComplete():void
				{
					
					DispatchMananger._em3D.dispatchEvent(new EnemyEvents('removeenemy',_farm))
					trace("---------remove-----0---------:")
				}

		}
	}
}
import com.virtuos.Characters.Farmer;

//用于寻路的ai
internal class PathFinder{
	//
	public static var _startX:uint=7;
	public static var _startY:uint=1;
	//
	public static var _endX:uint=5;
	public static var _endY:uint=1;
	//地图数据
	public static var _map:Array ,_queue:Vector.<Object>;
	
	private static var _farmDebug:Farmer;
	public static function findPath(map:Array,sX:uint=7,sY:uint=1,eX:uint=5,eY:uint=1,$farm:Farmer=null):Vector.<Object>{
		var i:int;
		_farmDebug=$farm
		_queue = new Vector.<Object>();
		_map = map;		
		//first find the coordinate of finish which is a first object
		var finishObject:Object;
		var counter:int = 0;
		_startX=sX;
		_startY=sY;
		_endX=eX;
		_endY=eY;
		//trace(_startX,_startY,_endX,_endY)
		finishObject={i:_endX,j:_endY,counter:0}
		_queue.push(finishObject);		
		//trace(_queue)
		//run recursive function to find the shortest path
		checkQueue(0, 1);		
		
		//my function search Path;
		/**
		 * 寻最短路径
		 * 
		 * */
		var newDisX:uint=_startX;
		var newDisY:uint=_startY;
		
		var pathArray:Vector.<Object>=new Vector.<Object>;
		var _counter:uint=_queue[_queue.length-1].counter;
		var _len:uint=_queue.length-1;		
		for(i=_len;i>=0;--i){
			if(Math.abs(_queue[i].i-newDisX)==1&&Math.abs(_queue[i].j-newDisY)==0&&_queue[i].counter<=_counter){
				pathArray.push(_queue[i])
				newDisX=_queue[i].i;
				_counter=_queue[i].counter
			}else if(Math.abs(_queue[i].i-newDisX)==0&&Math.abs(_queue[i].j-newDisY)==1&&_queue[i].counter<=_counter){
				pathArray.push(_queue[i])
				newDisY=_queue[i].j;				
				_counter=_queue[i].counter
			}			
		}		
		/**
		 * 是否全部打印寻路信息
		 * */
		var printAll:Boolean=false;
		if(printAll){
			main3D._test=_queue
		}else{
			main3D._test=pathArray;
		}
		return pathArray;
	}
	
	private static function checkQueue(startIndex:int, counter:int):void{
		var lastQueueLength:int = _queue.length;
		var i:int;
		//trace(_startX,_startY,_endX,_endY)
		for (i = startIndex; i < lastQueueLength; i++)
		{
			var coordinate:Object;
			//check top				
			if (_queue[i].j != 0 && 
				(_map[_queue[i].i][_queue[i].j - 1]==0||_map[_queue[i].i][_queue[i].j - 1]==7||_map[_queue[i].i][_queue[i].j - 1]==8))
			{
				coordinate = {i: _queue[i].i, j: _queue[i].j - 1, counter:counter};
				//if this coordinate is the start finish algorothm as 
				//the shortest path was just found
				if (coordinate.i==_startX&&coordinate.j ==_startY)
					return;
				//if a coordinate already exists in the queue 
				//and has higher coordinate it won't be added
				//but if it has lower coordinate it will replace the one in the queue
				if (canBeAddedToQueue(coordinate))
				_queue.push(coordinate);
			}
			//check right			
			if (_queue[i].i != _map.length - 1 && 
				(_map[_queue[i].i + 1][_queue[i].j] ==0||_map[_queue[i].i + 1][_queue[i].j] ==7||_map[_queue[i].i + 1][_queue[i].j] ==8))
			{
				coordinate = {i: _queue[i].i + 1, j: _queue[i].j, counter:counter};
				if (coordinate.i==_startX&&coordinate.j == _startY) 
					return;
				if (canBeAddedToQueue(coordinate)) 
				_queue.push(coordinate);
			}
			//check bottom
			if (_queue[i].j != _map[_queue[i].i].length - 1 && 
				(_map[_queue[i].i][_queue[i].j + 1] ==0||_map[_queue[i].i][_queue[i].j + 1] ==7||_map[_queue[i].i][_queue[i].j + 1] ==8))
			{
				coordinate = {i: _queue[i].i, j: _queue[i].j + 1, counter:counter};
				if (coordinate.i==_startX&&coordinate.j == _startY) 
					return;
				if (canBeAddedToQueue(coordinate)) 
					_queue.push(coordinate);
			}
			//check left
			if (_queue[i].i != 0 && 
				(_map[_queue[i].i - 1][_queue[i].j] ==0||_map[_queue[i].i - 1][_queue[i].j] ==7||_map[_queue[i].i - 1][_queue[i].j] ==8))
			{
				coordinate = {i: _queue[i].i - 1, j: _queue[i].j, counter:counter};
				if (coordinate.i==_startX&&coordinate.j == _startY) 
					return;
				if (canBeAddedToQueue(coordinate)) 
					_queue.push(coordinate);
			}
		}
		try{
			checkQueue(lastQueueLength, counter + 1);
		}catch(e:Error){
			trace(_farmDebug._id,"can't find his way")
		}
	}
	public static function canBeAddedToQueue(coordinate:Object):Boolean
	{
		for (var i:int = _queue.length - 1; i >= 0 ; i--)
		{
			if (coordinate.i == _queue[i].i && coordinate.j == _queue[i].j)
			{
				if (coordinate.counter >= _queue[i].counter)
				{
					return false;
				}
				else
				{
					_queue.splice(i, 1);
					return true;
				}
			}
		}
		return true;
	}
}